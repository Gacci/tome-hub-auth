services:
  auth-redis:
    image: "redis:7"
    container_name: auth-redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 30s
    networks:
      - auth-network
    platform: linux/arm64
    ports:
      - "${REDIS_PORT}:6378"
    restart: always
    volumes:
      - auth_redis_data:/var/lib/redis  # Persistent Redis data


  auth-rabbit:
    image: rabbitmq:3-management
    container_name: auth-rabbitmq
    networks:
      - auth-network
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"     # AMQP
      - "${RABBITMQ_UI_PORT}:15672"   # UI


  auth-mysql:
    image: mysql/mysql-server:8.0
    container_name: auth-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_TIMEZONE: "UTC"
    healthcheck:
      test: ["CMD", "mysql", "-h", "auth-mysql", "-u", "${DB_USER}", "-p${DB_PASS}", "-e", "SELECT 1"]
      interval: 30s
      retries: 3
      start_period: 60s
      timeout: 30s
    networks:
      - auth-network
    platform: linux/arm64
    ports:
      - "${DB_PORT}:3306"
    restart: always
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - auth_mysql_data:/data


  auth-localstack:
    image: localstack/localstack:2.3-arm64
    container_name: auth-localstack
    healthcheck:
      test: ["CMD", "curl", "http://localhost:${AWS_S3_PORT}"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 30s
    networks:
      - auth-network
    platform: linux/arm64
    ports:
      - "${AWS_S3_PORT}:4566"
    restart: always
    volumes:
      - auth_localstack_data:/var/lib/localstack


  app:
    build:
      context: "."
    container_name: auth-app
    depends_on:
      - auth-localstack
      - auth-mysql
      - auth-redis
    entrypoint: ["/app/wait-for-it.sh", "auth-mysql:${DB_PORT}", "--", "node", "/app/dist/src/main.js"]
    environment:
      NODE_ENV: dev
    networks:
      - auth-network
    platform: linux/arm64
    ports:
      - "${PORT}:${PORT}"
    restart: always
    volumes:
      - .env.dev:/app/.env.dev  # Mount the local .env file into the container MUST MATCH THE .env file used when deploying

volumes:
  auth_localstack_data:
    driver: local
  auth_mysql_data:
    driver: local
  auth_redis_data:
    driver: local


networks:
  auth-network:
    driver: bridge